/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1984, 1995, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

'use strict';

// MODULES //

var asinh = require( '@stdlib/math/base/special/asinh' );


// VARIABLES //

var MOREBITS = 6.123233995736765886130e-17; // pi/2 = PIO2 + MOREBITS


// MAIN //

/**
* Computes the arccosecant of a number.
*
* ## Method
*
* -   A rational function of the form
*
*     \operatorname{acsch}(x) = \operatorname{asinh}(\frac{1}{x})
*     ```
*
* @param {number} x - input value
* @returns {number} hyperbolic arccosecant (in radians)
*
/**
* Computes the arccosecant of a number.
*
*
* @example
* var v = acsch( 2.0 );
* // returns ~0.48
*
* @example
* var v = acsch( 5.0 );
* // returns ~0.2
*
* @example
* var v = acsch( -23.0 );
* // returns ~-0.04
*
* @example
* var v = acsch( NaN );
* // returns NaN
*/
function acsch( x ) {
	return asinh(1.0 / x);
}


// EXPORTS //

module.exports = acsch;
